{"version":3,"sources":["components/Previewer.js","components/Editor.js","actions/index.js","components/App.js","reducers/index.js","index.js"],"names":["renderer","marked","Renderer","setOptions","connect","state","markdown","props","className","id","dangerouslySetInnerHTML","__html","replace","window","JSDOM","DOMPurify","createDOMPurify","setMarkdown","type","payload","value","onChange","event","sanitize","target","App","placeholderMarkdown","combineReducers","action","store","createStore","reducers","ReactDOM","render","document","querySelector"],"mappings":"iQAIMA,EAAW,IAAIC,IAAOC,SAC5BD,IAAOE,WAAW,CACdH,aAGJ,IAoBeI,eAJS,SAACC,GACrB,MAAO,CAAEC,SAAUD,EAAMC,YAGdF,EApBG,SAACG,GACf,OAEI,yBAAKC,UAAU,cACX,wBAAIA,UAAU,mBAAd,aAGA,yBAAKC,GAAG,UACRC,wBAAyB,CAACC,OAAQV,IAAOM,EAAMD,SAASM,QAAQ,SAAU,a,2BCThFC,G,QAAU,IAAIC,QAAM,IAAKD,QACzBE,EAAYC,IAAgBH,GA8CnBT,eAdS,SAACC,GACrB,MAAO,CAAEC,SAAUD,EAAMC,YAezB,CAAEW,YCvDqB,SAACX,GACxB,MAAO,CACHY,KAJoB,eAKpBC,QAASb,KDkDFF,EA3CA,SAACG,GAYZ,OACI,yBAAKC,UAAU,cACX,wBAAIA,UAAU,mBAAd,UAGA,8BACIC,GAAG,SACHW,MAAOb,EAAMD,SACbe,SAnBS,SAACC,GAClB,IAAMhB,EAAWS,EAAUQ,SAASD,EAAME,OAAOJ,OACjDb,EAAMU,YAAYX,UEUXmB,G,QAjBH,WACR,OACI,6BACI,yBAAKjB,UAAU,4CAAf,kCACA,yBAAKA,UAAU,WACX,yBAAKA,UAAU,mCACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,kCACX,kBAAC,EAAD,WCThBkB,EAAsB,8qBA0BxBd,QAAQ,SAAU,KAoBLe,cAAgB,CAC3BrB,SAlBuB,WAA2C,IAA1CA,EAAyC,uDAAhCoB,EAAqBE,EAAW,uCACjE,MFtCwB,iBEsCpBA,EAAOV,KACAU,EAAOT,QAEXb,KCjCLuB,EAAQC,YAAYC,GAE1BC,IAASC,OACL,kBAAC,IAAD,CAAUJ,MAAOA,GACb,kBAAC,EAAD,OAEJK,SAASC,cAAc,W","file":"static/js/main.531ff767.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport marked from 'marked';\n\nconst renderer = new marked.Renderer();\nmarked.setOptions({\n    renderer,\n   });\n\nconst Previewer = (props) => {\n    return (\n\n        <div className=\"ui segment\">\n            <h3 className=\"ui block header\">\n                Previewer\n            </h3>\n            <div id=\"preview\"\n            dangerouslySetInnerHTML={{__html: marked(props.markdown.replace(/&gt;+/g, '>'))}}\n            />\n        </div>\n        \n       \n    )\n};\n\nconst mapStateToProps = (state) => {\n    return { markdown: state.markdown }\n}\n\nexport default connect(\n    mapStateToProps\n)(Previewer);","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport createDOMPurify from 'dompurify';\nimport { JSDOM } from 'jsdom';\n\nimport { setMarkdown } from '../actions';\nimport './Editor.css';\n\nconst window = (new JSDOM('')).window;\nconst DOMPurify = createDOMPurify(window);\n\n\nconst Editor = (props) => {\n    const handleChange = (event) => {\n        const markdown = DOMPurify.sanitize(event.target.value)\n        props.setMarkdown(markdown);\n    }\n    \n    // eq to componentDidUpdate (props)\n    //useEffect(() => {\n    //    console.log(DOMPurify.sanitize('<svg><g/onload=alert(2)//<p>'));\n    //}, [props])\n\n\n    return (\n        <div className=\"ui segment\">\n            <h3 className=\"ui block header\">\n                Editor\n            </h3>\n            <textarea\n                id=\"editor\"\n                value={props.markdown}\n                onChange={handleChange}\n            />\n        </div>\n    )\n}\n\n/* The plain object returned will be \nmerged into the wrapped component's props\n  */\nconst mapStateToProps = (state) => {\n    return { markdown: state.markdown }\n}\n\n/* The connect function connects \na React component to a Redux store\nIt provides its connected component\nwith the pieces of data it needs from the\nstore, and the functions it can use to\ndispatch actions to the store.\nIt does not modify the component you pass\ninto it, instead it returns a new, connected\ncomponent class that wraps the component\nyou passed in*/\nexport default connect(\n    mapStateToProps,\n    { setMarkdown }\n)(Editor);","export const SET_MARKDOWN = 'SET_MARKDOWN';\n\nexport const setMarkdown = (markdown) => {\n    return {\n        type: SET_MARKDOWN,\n        payload: markdown\n    }\n}","import React from 'react';\nimport Previewer from './Previewer';\nimport Editor from './Editor';\n\nimport './App.css';\n\n// Two child components: Previewer and Editor\n\nconst App = () => {\n    return (\n        <div>\n            <div className=\"app-header ui center aligned huge header\">FCC Markdown Previewer Project</div>\n            <div className=\"ui grid\">\n                <div className=\"right floated seven wide column\">\n                    <Editor />\n                </div>\n                <div className=\"left floated seven wide column\">\n                    <Previewer />\n                </div>\n                \n            </div>\n        </div>\n    )\n}\n\nexport default App;","import { combineReducers } from 'redux';\nimport { SET_MARKDOWN } from '../actions';\n/* A reducer is a pure function \nthat takes the previous state and an action\nand returns the next state\n*/\n\n// initial state\nlet placeholderMarkdown = `\n# Welcome to my React Markdown Previewer!  \n## Feel free to take a look around  \nTake a look at my [portfolio page](https://andrayantelo.github.io) while you're here  \nHave some code: \\` const hello = () => 'hello stranger'\\`  \nOh? You want more code? Here:\n\\`\\`\\`\n    const feed = (viewer) => {  \n        if (viewer === 'hungry') {  \n            feed()  \n        }  \n        else {  \n            return  \n        }  \n    } \n\\`\\`\\`\nHere is a list:\n1. Do groceries  \n2. feed dog  \n3. Go to bank \n\n>Go do those things (this is a blockquote) \n\n![alt text](http://pngimages.net/sites/default/files/gingerbread-small-png-image-11976.png \"Stock Photo\")  \n**Cookie!**\n\n`.replace(/&gt;+/g, '>')\n;\n\nconst setMarkdownReducer = (markdown=placeholderMarkdown, action) => {\n    if (action.type === SET_MARKDOWN) {\n        return action.payload;\n    }\n    return markdown;\n}\n/*  The combineReducer function is a helper\nfunction that turns an object whose values\nare different reducing functions into a single\nreducing function that can be passed to\ncreateStore.\nThe resulting reducer calls every child\nreducer, and gathers their results into\na single state object. The state produced\nby combineReducers namespaces the states\nof each reducer under their keys passed to\ncombineReducer */\nexport default combineReducers({\n    markdown: setMarkdownReducer\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst store = createStore(reducers);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.querySelector('#root')\n)"],"sourceRoot":""}